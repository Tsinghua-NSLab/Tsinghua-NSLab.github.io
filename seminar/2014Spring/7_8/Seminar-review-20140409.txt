Overview[edit]Title: TFA: A Tunable Finite Automaton for Regular Expression Matching
Source: TR, NYU
Attendee: Prof. Xue, Zhen Chen, Xiang Wang, Kai Wang, Yihang Luo, Feng Xie, Yiyang Shao, Zhenlong Yuan, Zhi Liu, Zhe Fu, Chang Chen (陈昌), Xiaohe Hu, Xiwei Feng, Chang Chen (陈畅), Chen Chen, Group of Prof. Xue
Speaker: Zhe Fu
Recorder: Zhi Liu
Presentation[edit]NFA & DFA
Related Work
Motivations & TFA Overview
TFA States
TFA Transitions
Constructing a TFA
TFA data structure
SST
4 steps of construction
Critical issues in implementation of TFA
SSP problem
2-SSP problem
b-SSP problem
State Encoding
Performance Evaluation
Number of States
State Encoding
Number of Active StatesDiscussion[edit]Prof. Xue: 论文中没有比较算法的在线匹配性能，只比较了数据结构的规模和压缩效果。
Kai Wang: 这篇文章主要利用的是基于状态进行分组的方法，在生成DFA状态之后对状态进行分组，而不是规则分组。
Zhe Fu:而且文章中评测的规则集规模比较小。
Zhi Liu:哪些问题是规则分组不能解决，而状态分组可以解决的？
Zhe Fu:单条规则造成的爆炸问题，例如文中的Snort 3规则集。
Xiang Wang:这篇文章在预处理中可能出现状态爆炸，仍有可能无法编译？
Kai Wang: 是的，确实存在这个问题，当DFA本身状态数过多时状态无法生成，也没有办法进行状态分组。
Xiang Wang:那文章中提到这种方法不需要计算出全部DFA是指？
Zhe Fu:是指只需要得到DFA的每个状态，不需要将状态之间的转移计算出来。
Zhi Liu:TFA中的编码算法是如何实现的？
Zhe Fu:文章没有详细介绍算法细节，只是用示例来解释。从文中看利用了最直观的编码方法，并解决了“或”的问题，但文中也提到编码利用率不高。
Prof. Xue: 是否已经发表？
Zhe Fu: 还没有，但是应该是比较早的成果。