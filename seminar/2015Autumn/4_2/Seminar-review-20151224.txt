Overview[edit]Title:￼ Poptrie: A Compressed Trie with Population Count for Fast and Scalable Software IP Routing Table Lookup
Source: SIGCOMM 2015
Attendee: Prof. Jun Li, Prof. Yibo Xue, Yiyang Shao, Zhenlong Yuan, Zhi Liu, Zhe Fu, Ju Xing, Jun Yang, Dongfang Li.
Speaker: Dongfang Li
Recorder: Zhenlong Yuan
Presentation[edit]IP Routing Table Lookup
Principle
Longest prefix match
Challenges
Large and growing routing table
High lookup rate requirement
Radix Tree(Revisited)
Tree BitMap
Succinct Data Structure
SAIL
3-level Multiway Trie
DXR
Binary Search in Range TableKey Ideas for High Lookup Rate
Reduce instructions including memory access
Increase CPU cache efficiencyBrief Summary of Poptrie
Multiway trie for IP routing table lookup in software
Basic algorithm
Multiway trie
Pointer compression with population count
Extensions
Compression with leaf bit-vector
Route aggregation
Direct pointingImlementation
Data size
Code in C: https://github.com/pixos/poptrieEvaluations
Effect of Extensions in Poptrie
Multicore Scalability
Comparison with Other Algorithms
Update
Performance in IPv6Conclusion
Poptrie: Multiway trie for IP routing table lookup in software
Small memory footprint with population count
e.g. 2.4 MiB for a global tier-11 ISP’s full route
Good performance through comprehensive evaluation
4-578% faster than other state-of-the art technologies
Advantageous for longer prefixes
Discussion[edit]footprint太大指的是？
指针占用的内存空间以及IP记录占用的内存空间太大
poptrie和radix trie的示意图的区别？
poptrie没有那么多深层，采用一个大表来实现这一目标。
pop count 本篇文章用了，这个指令的作用有多大？
挺重要，另外除此之外还有另外一个更不错的。