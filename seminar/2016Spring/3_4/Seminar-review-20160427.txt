Overview[edit]Title:￼ Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks
Attendee: Jun Li, Zhenlong Yuan, Zhi Liu, Zhe Fu, Xiaohe Hu, Ju Xing, Jun Yang, Danyang Li, Jiaqi Gao, Changsheng Zhang, Shuo Wang.
Speaker: Zhaoguo Wang
Recorder: Zhe Fu
Presentation[edit] Importance of GUI Security
 GUI content confidentiality and integrity are critical for end-to-end security
 UI Spoofing in desktop/browsers1
 Screenshot capture on Android without privilege2 Another Form of GUI Confidentiality Breach
 A weaker form
 UI state an app is in (e.g., login state) without knowing the exact pixels of the screen Enabled Attack: UI State Hijacking
 Hijack sensitive UI state to steal private input Other Enabled Attacks
 An enabled attack: camera peeking
 Steal sensitive pictures taken in Android apps
 Breaks GUI confidentiality!
 Monitor and analyze user behavior
 Breaks GUI confidentiality!
 Enhance existing attacks in both stealthiness and effectiveness UI State Leakage is Dangerous
 Lead to both GUI integrity and confidentiality breaches
 UI state information is not protected well
 An unprivileged application can track another app’s UI states in real time UI State Inference Attack
 UI state: a mostly consistent UI at window level for certain functionality (e.g., log-in)
 On Android: Activity (full-screen window)
 Also called Activity inference attack
 An unprivileged app can infer the foreground Activity in real time
 Requires no permission Underlying Causes
 Android GUI framework design leaks UI state changes through a publicly-accessible side channel
 A newly-discovered shared-memory side channel
 Affects nearly all popular OSes Shared-Memory Side Channel
 Finding: shared virtual memory size changes are correlated with Android window events Evaluation Results
 Activity transition detection, for all apps
 Detection accuracy ≥ 96.5%
 FP and FN rates both ≤ 4%
 Activity inference accuracy
 80–90% for 6 out of 7 popular apps
 Inference computation & delay
 Inference computation time: ≤ 10 ms
 Delay (Activity transition  inference result): ≤ 1.3 sec
 Overhead
 Increase power usage by 2.2–6.0% Defense Discussion
 Eliminate the side channel
 Proc file system access control
 Window buffer reuse
 Mitigate those follow-up attacks
 For example, for UI state hijacking
 Defense is non-trivial, more effort is required Summary
 Demonstrated serious security implications for a new form of GUI confidentiality breachDiscussion[edit] Xiaohe: Are processes separated in OS?
 Zhaoguo: Processes can talk to each other by bundle in Android. Jun: What’s the meaning of CPU? How to detect different APPs?
 Zhaoguo: CPU usage. Combine several factors (memory, network, cpu, etc…) to detect different APPs. Jiaqi: If different APPs use different animations, will this problem be solved?
 Zhaoguo: All animations can be copied. And forcibly distinguish animations of different APPs will influence user experience. Danyang: Can we detect activity by screenshot?
 Zhaoguo: Yes, but it needs more computation.